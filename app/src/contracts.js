
// !!! this is autogenerated by a setup script. Changes will be overwritten !!! 
export class Contracts {
 address = "0x227140c4cbec281236ffd234b6551182282fe17f"
    Election = {
  "code": "0x6000805460a060020a60ff0219168155600381905560806040819052606082905260048054818452825160ff1916825590927f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b602060026101006001861615026000190190941693909304601f0192909204820192909190620000ad565b82800160010185558215620000ad579182015b82811115620000ad57825182559160200191906001019062000090565b5b50620000d19291505b80821115620000cd5760008155600101620000b7565b5090565b50506040805160208082019283905260009182905260058054818452845160ff1916825590937f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db060026001841615610100026000190190931692909204601f0192909204810192916200016f565b828001600101855582156200016f579182015b828111156200016f57825182559160200191906001019062000152565b5b50620001939291505b80821115620000cd5760008155600101620000b7565b5090565b50503462000000576040516200176738038062001767833981016040528051015b60008054600160a060020a0319166c010000000000000000000000003381020417815581516001805492819052917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf66020600261010084871615026000190190931692909204601f908101839004820193928601908390106200024357805160ff191683800117855562000273565b8280016001018555821562000273579182015b828111156200027357825182559160200191906001019062000256565b5b50620002979291505b80821115620000cd5760008155600101620000b7565b5090565b50505b505b6114bc80620002ab6000396000f3606060405236156100c45760e060020a600035046306fdde0381146100c95780632df9feaa1461014457806333e2df5d1461015357806344e4d226146101ba57806349da5a0f146102215780635bf5d54c1461029c5780635df81330146102c757806362d73eb8146103ea57806365372147146103f95780637736d735146104745780638932dc3d14610493578063bed34bba14610525578063e8d5940d146105c7578063e8f3052314610669578063f851a44014610678578063fa65fed9146106a1575b610000565b34610000576100d66106c0565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156101365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b346100005761015161074d565b005b34610000576101a6600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375094965061079a95505050505050565b604080519115158252519081900360200190f35b34610000576101a6600480803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496506107a295505050505050565b604080519115158252519081900360200190f35b34610000576100d661088c565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156101365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34610000576102a961091a565b60405180826003811161000057815260200191505060405180910390f35b34610000576102d760043561092a565b60408051600160a060020a038516815260606020820181815285546002600019610100600184161502019091160491830182905291928301906080840190869080156103645780601f1061033957610100808354040283529160200191610364565b820191906000526020600020905b81548152906001019060200180831161034757829003601f168201915b50508381038252845460026000196101006001841615020190911604808252602090910190859080156103d85780601f106103ad576101008083540402835291602001916103d8565b820191906000526020600020905b8154815290600101906020018083116103bb57829003601f168201915b50509550505050505060405180910390f35b3461000057610151610960565b005b34610000576100d661099a565b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156101365780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3461000057610481610a28565b60408051918252519081900360200190f35b3461000057610151600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f89358b01803591820183900483028401830190945280835297999881019791965091820194509250829150840183828082843750949650610a2e95505050505050565b005b3461000057610481600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f89358b01803591820183900483028401830190945280835297999881019791965091820194509250829150840183828082843750949650610c3d95505050505050565b60408051918252519081900360200190f35b3461000057610481600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f89358b01803591820183900483028401830190945280835297999881019791965091820194509250829150840183828082843750949650610d8a95505050505050565b60408051918252519081900360200190f35b34610000576101516111e7565b005b34610000576106856114a6565b60408051600160a060020a039092168252519081900360200190f35b34610000576104816114b5565b60408051918252519081900360200190f35b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107455780601f1061071a57610100808354040283529160200191610745565b820191906000526020600020905b81548152906001019060200180831161072857829003601f168201915b505050505081565b600160005460ff60a060020a9091041660038111610000571461076f57610000565b6000805460a060020a60ff021916740200000000000000000000000000000000000000001790555b5b565b60015b919050565b6000805b60025460ff821610156108815761086960028260ff16815481101561000057906000526020600020906003020160005b5060019081018054604080516020600295841615610100026000190190931694909404601f81018390048302850183019091528084529083018282801561085e5780601f106108335761010080835404028352916020019161085e565b820191906000526020600020905b81548152906001019060200180831161084157829003601f168201915b505050505084610c3d565b15156108785760019150610886565b5b6001016107a6565b600091505b50919050565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107455780601f1061071a57610100808354040283529160200191610745565b820191906000526020600020905b81548152906001019060200180831161072857829003601f168201915b505050505081565b60005460a060020a900460ff1681565b600281815481101561000057906000526020600020906003020160005b508054600160a060020a03169150600181019060020183565b6000805460a060020a900460ff1660038111610000571461098057610000565b6000805460a060020a60ff02191660a060020a1790555b5b565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107455780601f1061071a57610100808354040283529160200191610745565b820191906000526020600020905b81548152906001019060200180831161072857829003601f168201915b505050505081565b60035481565b60005433600160a060020a03908116911614610a4957610000565b8160049080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610a9557805160ff1916838001178555610ac2565b82800160010185558215610ac2579182015b82811115610ac2578251825591602001919060010190610aa7565b5b50610ae39291505b80821115610adf5760008155600101610acb565b5090565b50508060059080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b3157805160ff1916838001178555610b5e565b82800160010185558215610b5e579182015b82811115610b5e578251825591602001919060010190610b43565b5b50610b7f9291505b80821115610adf5760008155600101610acb565b5090565b50507f315467641f31e984f2c98145b0eaa664b1ee32c9d04af80e96fc70d7ea5ed1b38260405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015610c035780820380516001836020036101000a031916815260200191505b509250505060405180910390a16000805460a060020a60ff021916740300000000000000000000000000000000000000001790555b5b5050565b60408051602081810183526000918290528251908101909252908190528251825184918491849082901015610c7157825191505b5060005b81811015610d4a57828181518110156100005790602001015160f860020a900460f860020a02600160f860020a031916848281518110156100005790602001015160f860020a900460f860020a02600160f860020a0319161015610ce1576000199450610d7e56610d40565b828181518110156100005790602001015160f860020a900460f860020a02600160f860020a031916848281518110156100005790602001015160f860020a900460f860020a02600160f860020a0319161115610d405760019450610d7e565b5b5b600101610c75565b825184511015610d62576000199450610d7e56610d7e565b825184511115610d795760019450610d7e56610d7e565b600094505b5b5b5050505092915050565b6000600160005460ff60a060020a90910416600381116100005714610de557604080516063815290517fb48fb6cf86d9c47e2268650bac422c18104332e413943278776f488788b991da9181900360200190a15060636111e1565b610dee836107a2565b15610e2f57604080516002815290517fb48fb6cf86d9c47e2268650bac422c18104332e413943278776f488788b991da9181900360200190a15060026111e1565b610e388361079a565b1515610e7a57604080516003815290517fb48fb6cf86d9c47e2268650bac422c18104332e413943278776f488788b991da9181900360200190a15060036111e1565b60028054806001018281815481835581811511610f9157600302816003028360005260206000209182019101610f9191905b80821115610adf578054600160a060020a031916815560018082018054600080835592600260001991831615610100029190910190911604601f819010610ef35750610f25565b601f016020900490600052602060002090810190610f2591905b80821115610adf5760008155600101610acb565b5090565b5b5060028201805460018160011615610100020316600290046000825580601f10610f505750610f82565b601f016020900490600052602060002090810190610f8291905b80821115610adf5760008155600101610acb565b5090565b5b5050600301610eac565b5090565b5b505050916000526020600020906003020160005b50604080516060810182523380825260208083018990529282018790528354600160a060020a0319166c010000000000000000000000009182029190910417835586516001808501805460008281528690209496959194600261010094831615949094026000190190911692909204601f90810182900483019392918b019083901061103d57805160ff191683800117855561106a565b8280016001018555821561106a579182015b8281111561106a57825182559160200191906001019061104f565b5b5061108b9291505b80821115610adf5760008155600101610acb565b5090565b50506040820151816002019080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106110df57805160ff191683800117855561110c565b8280016001018555821561110c579182015b8281111561110c5782518255916020019190600101906110f1565b5b5061112d9291505b80821115610adf5760008155600101610acb565b5090565b50505050506003600081548092919060010191905055507fa7a2d63bd1f87ffea418b9b849b6a1269324f00cd20483c847eab567ab3c0cfa8360035460405180806020018381526020018281038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156111cf5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a15060005b92915050565b60005433600160a060020a0390811691161461120257610000565b6000805460a060020a60ff021916815560028054828255829080158290116113245760030281600302836000526020600020918201910161132491905b80821115610adf578054600160a060020a031916815560018082018054600080835592600260001991831615610100029190910190911604601f81901061128657506112b8565b601f0160209004906000526020600020908101906112b891905b80821115610adf5760008155600101610acb565b5090565b5b5060028201805460018160011615610100020316600290046000825580601f106112e35750611315565b601f01602090049060005260206000209081019061131591905b80821115610adf5760008155600101610acb565b5090565b5b505060030161123f565b5090565b5b505060006003819055604080516020808201928390529083905260048054818552835160ff19168255909550601f6002610100600184161502600019019092169190910401047f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9081019350906113c4565b828001600101855582156113c4579182015b828111156113c45782518255916020019190600101906113a9565b5b506113e59291505b80821115610adf5760008155600101610acb565b5090565b50506040805160208082019283905260009182905260058054818452845160ff1916825590937f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db060026001841615610100026000190190931692909204601f01929092048101929161147f565b8280016001018555821561147f579182015b8281111561147f578251825591602001919060010190611464565b5b50610c389291505b80821115610adf5760008155600101610acb565b5090565b50505b5b565b600054600160a060020a031681565b6003545b9056",
  "info": {
    "source": "pragma solidity ^0.4.4;\n\n/*\nERROR CODES\n\nError 1 = NO_PERMISSION\nError 2 = ALREADY_VOTED\nError 3 = INVALID_TOKEN\nError 99 = WRONG_STAGE\n*/\n\n\n// TODO: cleanup, better state checks\ncontract Election {\n\n// ############## EVENTS ##############\n\n    event error(uint);\n    event log(string);\n    event voteEvent(string, uint);\n    event resultPublished(string);\n\n// ############## STRUCTS ##############\n\n    struct Vote {\n        address addr;\n        string token;\n        string candidate;\n    }\n\n    enum Stage {\n        PRE_VOTING,\n        VOTING,\n        PROCESSING,\n        RESULT\n    }\n\n// ############## FIELDS ##############\n\n    // contract owner becomes admin\n    address public admin;\n    Stage public currentStage = Stage.PRE_VOTING;\n\n    // name of the election, e.g. \"BP 2016\"\n    string public name;\n    \n    Vote[] public votes;\n    uint public nrVotes = 0;\n\n    string public result = \"\";\n    string public privateKey = \"\";\n\n// ############## PUBLIC FUNCTIONS ##############\n\n// TODO: add constant keyword to readonly functions. Remove return from write functions\n\n    // Constructor of the contract\n    function Election(string _name) {\n        admin = msg.sender;\n        name = _name;\n    }\n\n    // https://youtu.be/kTlLX9jMjwk\n    function resetElection() requiresAdmin {\n        currentStage = Stage.PRE_VOTING;\n        votes.length = 0;\n        nrVotes = 0;\n        result = \"\";\n        privateKey = \"\";\n    }\n\n    function startElection() preVoting {\n        currentStage = Stage.VOTING;\n    }\n\n    function stopElection() voting {\n        currentStage = Stage.PROCESSING;\n    }\n    \n    function vote(string _token, string _candidate) returns(uint) {\n        if(currentStage != Stage.VOTING) { error(99); return 99; } // WRONG_STAGE\n        if(alreadyVoted(_token)) { error(2); return 2; } // ALREADY_VOTED\n        if(! isTokenValid(_token)) { error(3); return 3; } // INVALID_TOKEN\n\n        // check vote validity\n\n        votes.push(Vote({\n            addr: msg.sender,\n            token: _token,\n            candidate: _candidate\n        }));\n        nrVotes++;\n        voteEvent(_token, nrVotes);\n        return 0;\n    }\n\n    function getNrVotes() returns(uint) {\n        return nrVotes;\n    }\n\n    function publishResult(string _result, string _privateKey) requiresAdmin {\n        result = _result;\n        privateKey = _privateKey;\n\n        resultPublished(_result);\n        currentStage = Stage.RESULT;\n    }\n\n// ############## MODIFIERS ##############\n\nmodifier requiresAdmin {\n    if(msg.sender != admin) throw;\n    _;\n}\n\nmodifier preVoting {\n    if(currentStage != Stage.PRE_VOTING) throw;\n    _;\n}\n\nmodifier voting {\n    if(currentStage != Stage.VOTING) throw;\n    _;\n}\n\n/*\nmodifier postVoting {\n    if(currentStage != Stage.POST_VOTING) throw;\n    _;\n}\n*/\n\n// ############## PRIVATE FUNCTIONS ##############\n\n    function alreadyVoted(string _token) returns(bool) {\n        for(var i=0; i<votes.length; i++) {\n            if(compareStrings(votes[i].token, _token) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // checks if the token is valid and signed by the election registrar\n    // TODO: implement (see https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d)\n    function isTokenValid(string _token) returns (bool) {\n        return true;\n    }\n\n    // from https://raw.githubusercontent.com/ethereum/dapp-bin/master/library/stringUtils.sol\n    function compareStrings(string _a, string _b) returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n    }\n}\n",
    "language": "Solidity",
    "languageVersion": "0.4.6",
    "compilerVersion": "0.4.6",
    "compilerOptions": "--combined-json bin,abi,userdoc,devdoc --add-std --optimize",
    "abiDefinition": [
      {
        "constant": true,
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "stopElection",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_token",
            "type": "string"
          }
        ],
        "name": "isTokenValid",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_token",
            "type": "string"
          }
        ],
        "name": "alreadyVoted",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "privateKey",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "currentStage",
        "outputs": [
          {
            "name": "",
            "type": "uint8"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "votes",
        "outputs": [
          {
            "name": "addr",
            "type": "address"
          },
          {
            "name": "token",
            "type": "string"
          },
          {
            "name": "candidate",
            "type": "string"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "startElection",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "result",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "nrVotes",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_result",
            "type": "string"
          },
          {
            "name": "_privateKey",
            "type": "string"
          }
        ],
        "name": "publishResult",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_a",
            "type": "string"
          },
          {
            "name": "_b",
            "type": "string"
          }
        ],
        "name": "compareStrings",
        "outputs": [
          {
            "name": "",
            "type": "int256"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_token",
            "type": "string"
          },
          {
            "name": "_candidate",
            "type": "string"
          }
        ],
        "name": "vote",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "resetElection",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "admin",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "getNrVotes",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "inputs": [
          {
            "name": "_name",
            "type": "string"
          }
        ],
        "payable": false,
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "error",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "",
            "type": "string"
          }
        ],
        "name": "log",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "",
            "type": "string"
          },
          {
            "indexed": false,
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "voteEvent",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "",
            "type": "string"
          }
        ],
        "name": "resultPublished",
        "type": "event"
      }
    ],
    "userDoc": {
      "methods": {}
    },
    "developerDoc": {
      "methods": {}
    }
  }
}
}