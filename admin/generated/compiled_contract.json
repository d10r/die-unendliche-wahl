{
  "code": "6000805460a060020a60ff02191681556001600281815560048390556080604081905260608490526005805494819052905160ff1916815592610092926020601f9183161561010002600019019092169290920491909101047f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0908101905b808211156100ff576000815560010161007e565b5050604080516020808201928390526000918290526006805492819052925160ff1916835561010391601f6002600019610100600185161502019092169190910401047ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f9081019061007e565b5090565b505060405161155138038061155183398101604052808051820191906020015050600080546c0100000000000000000000000033810204600160a060020a031990911617815581516001805492819052916020601f60026000198487161561010002019093169290920482018190047fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6908101939290918601908390106101bd57805160ff19168380011785555b506101ed92915061007e565b828001600101855582156101b1579182015b828111156101b15782518260005055916020019190600101906101cf565b505050611353806101fe6000396000f3606060405236156100e55760e060020a600035046306fdde0381146100ea5780632df9feaa1461014e57806333e2df5d1461017157806344e4d226146101c657806349da5a0f1461021b5780635bf5d54c146102805780635df81330146102995780635fc9dd8f146102da57806362d73eb8146103085780637736d7351461032b5780638932dc3d146103395780638a19c8bc146103e1578063abcc11d8146103ef578063bd85948c14610454578063bed34bba14610477578063d826f88f1461050a578063e8d5940d1461052d578063f851a4401461060c578063fa65fed914610623575b610002565b346100025761063e60018054604080516020601f6002600019610100878916150201909516949094049384018190048102820181019092528281529291908301828280156109915780601f1061096657610100808354040283529160200191610991565b34610002576106ac60005433600160a060020a0390811691161461099957610002565b34610002576106ae6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496506106c795505050505050565b34610002576106ae6004808035906020019082018035906020019191908080601f016020809104026020016040519081016040528093929190818152602001838380828437509496506106d295505050505050565b346100025761063e60068054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281529291908301828280156109915780601f1061096657610100808354040283529160200191610991565b346100025761062c60005460ff60a060020a9091041681565b34610002576107656004356003805482908110156100025790600052602060002090600302016000508054600160a060020a03169150600181019060020183565b346100025760025460005460a060020a900460ff166040805192835260208301919091528051918290030190f35b34610002576106ac60005433600160a060020a03908116911614610a4457610002565b346100025761062c60045481565b34610002576106ac6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f810183900483028401830190945283835297999860449892975091909101945090925082915084018382808284375094965050505050505060005433600160a060020a03908116911614610a7357610002565b346100025761062c60025481565b346100025761063e60058054604080516020601f600260001961010060018816150201909516949094049384018190048102820181019092528281529291908301828280156109915780601f1061096657610100808354040283529160200191610991565b34610002576106ac60005433600160a060020a03908116911614610c9e57610002565b346100025761062c6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f81018390048302840183019094528383529799986044989297509190910194509092508291508401838280828437509496506108aa95505050505050565b34610002576106ac60005433600160a060020a03908116911614610da057610002565b346100025761062c6004808035906020019082018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843750506040805160208835808b0135601f81018390048302840183019094528383529799986044989297509190910194509092508291508401838280828437509496505050505050506000805460ff60a060020a909104166001146106cd57604080516063815290517fb48fb6cf86d9c47e2268650bac422c18104332e413943278776f488788b991da9181900360200190a150606361102d565b346100025761094a600054600160a060020a031681565b34610002576004545b60408051918252519081900360200190f35b60405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561069e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b005b604080519115158252519081900360200190f35b611074835b50600190565b611033835b6000805b60045460ff82161015610a2257610a2d60036000508260ff16815481101561000257600091825260209182902060016003909202018101805460408051600294831615610100026000190190921693909304601f8101859004850282018501909352828152929091908301828280156108a35780601f10610878576101008083540402835291602001916108a3565b60408051600160a060020a038516815260606020820181815285546002600019610100600184161502019091160491830182905291928301906080840190869080156107f25780601f106107c7576101008083540402835291602001916107f2565b820191906000526020600020905b8154815290600101906020018083116107d557829003601f168201915b50508381038252845460026000196101006001841615020190911604808252602090910190859080156108665780601f1061083b57610100808354040283529160200191610866565b820191906000526020600020905b81548152906001019060200180831161084957829003601f168201915b50509550505050505060405180910390f35b820191906000526020600020905b81548152906001019060200180831161088657829003601f168201915b5050505050845b604080516020818101835260009182905282519081019092529081905282518251849184918490829010156108de57825191505b5060005b81811015610d0357828181518110156100025790602001015160f860020a900460f860020a02600160f860020a031916848281518110156100025790602001015160f860020a900460f860020a02600160f860020a0319161015610d17576000199450610d96565b60408051600160a060020a039092168252519081900360200190f35b820191906000526020600020905b81548152906001019060200180831161097457829003601f168201915b505050505081565b60005460ff60a060020a909104166001146109b357610002565b600080547402000000000000000000000000000000000000000060a060020a60ff021990911617908190556002546040805160a060020a90930460ff1683525190917fbd0f3f301d10905296db8a83cc5fa6969ce6e4f576be2324fea5a881b6e5e09c919081900360200190a2565b600091505b50919050565b1515610a3c5760019150610a27565b6001016106d6565b60005460a060020a900460ff1615610a5b57610002565b6000805460a060020a60ff02191660a060020a179055565b8160056000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610be157805160ff19168380011785555b50610c119291505b80821115610c6a5760008155600101610ac6565b50506002600050547f63a314dfe987464a00aca0e40da3ab2d10d3c8e38c2039a185cf2781dabfc9338360405180806020018281038252838181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f168015610b645780820380516001836020036101000a031916815260200191505b509250505060405180910390a260408051600080547403000000000000000000000000000000000000000060a060020a60ff0219909116179081905560025460a060020a90910460ff16825291517fbd0f3f301d10905296db8a83cc5fa6969ce6e4f576be2324fea5a881b6e5e09c9181900360200190a25b5050565b82800160010185558215610abe579182015b82811115610abe578251826000505591602001919060010190610bf3565b50508060066000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610c6e57805160ff19168380011785555b50610ada929150610ac6565b5090565b82800160010185558215610c5e579182015b82811115610c5e578251826000505591602001919060010190610c80565b6000805460a060020a60ff02191660a060020a9081178083556004929092556002805460010190819055604080519290930460ff16825291517fbd0f3f301d10905296db8a83cc5fa6969ce6e4f576be2324fea5a881b6e5e09c9181900360200190a2565b825184511015610d7e576000199450610d96565b828181518110156100025790602001015160f860020a900460f860020a02600160f860020a031916848281518110156100025790602001015160f860020a900460f860020a02600160f860020a0319161115610d765760019450610d96565b6001016108e2565b825184511115610d915760019450610d96565b600094505b5050505092915050565b6000805460a060020a60ff02191681556003805482825582908015829011610de157600302816003028360005260206000209182019101610de19190610e5c565b50506000600481905560408051602080820192839052908390526005805493819052915160ff19168255909350610f1592507f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db060026001841615610100026000190190931692909204601f0104810190610ac6565b50506003015b80821115610c6a57805473ffffffffffffffffffffffffffffffffffffffff1916815560018082018054600080835592600260001991831615610100029190910190911604601f819010610ed957505b5060028201600050805460018160011615610100020316600290046000825580601f10610ef75750610e56565b601f016020900490600052602060002090810190610eac9190610ac6565b601f016020900490600052602060002090810190610e569190610ac6565b5050604080516020808201928390526000918290526006805492819052925160ff19168355610bdd91601f6002600019610100600185161502019092169190910401047ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f90810190610ac6565b50509050506002600050547fae146dc6e8afcbfbdfe3075df241379cdbee5d97b30952e7fff117e651fa7fd98460046000505460405180806020018381526020018281038252848181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561101b5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a25060005b92915050565b156106c257604080516002815290517fb48fb6cf86d9c47e2268650bac422c18104332e413943278776f488788b991da9181900360200190a150600261102d565b15156110b657604080516003815290517fb48fb6cf86d9c47e2268650bac422c18104332e413943278776f488788b991da9181900360200190a150600361102d565b60035460045414156110fe5760038054600181018083559190829080158290116110f9576003028160030283600052602060002091820191016110f991906111db565b505050505b604080516060810182523381526020810185905290810183905260048054600181019091556003805490919081101561000257906000526020600020906003020160005060008201518160000160006101000a815481600160a060020a0302191690836c010000000000000000000000009081020402179055506020820151816001016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061129457805160ff19168380011785555b506112c4929150610ac6565b50506003015b80821115610c6a57805473ffffffffffffffffffffffffffffffffffffffff1916815560018082018054600080835592600260001991831615610100029190910190911604601f81901061125857505b5060028201600050805460018160011615610100020316600290046000825580601f1061127657506111d5565b601f01602090049060005260206000209081019061122b9190610ac6565b601f0160209004906000526020600020908101906111d59190610ac6565b828001600101855582156111c9579182015b828111156111c95782518260005055916020019190600101906112a6565b50506040820151816002016000509080519060200190828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061132357805160ff19168380011785555b50610f82929150610ac6565b82800160010185558215611317579182015b8281111561131757825182600050559160200191906001019061133556",
  "info": {
    "source": "pragma solidity ^0.4.4;\n\n/*\nERROR CODES\n\nError 1 = NO_PERMISSION\nError 2 = ALREADY_VOTED\nError 3 = INVALID_TOKEN\nError 99 = WRONG_STAGE\n*/\n\n\n// TODO: cleanup, better state checks\ncontract Election {\n\n// ############## EVENTS ##############\n\n    event error(uint);\n    event log(string);\n    event voteEvent(uint indexed _currentRound, string _token, uint _nrVotes);\n    event resultPublishedEvent(uint indexed _currentRound, string _result);\n    event electionStatusEvent(uint indexed _currentRound, uint _status);\n\n// ############## STRUCTS ##############\n\n    struct Vote {\n        address addr;\n        string token;\n        string candidate;\n    }\n\n    enum Stage {\n        PRE_VOTING,\n        VOTING,\n        PROCESSING,\n        RESULT\n    }\n\n// ############## FIELDS ##############\n\n    // contract owner becomes admin\n    address public admin;\n    Stage public currentStage = Stage.PRE_VOTING;\n\n    // name of the election, e.g. \"BP 2016\"\n    string public name;\n\n    uint public currentRound = 1; // incremented for every election round\n    Vote[] public votes;\n    uint public nrVotes = 0;\n\n    string public lastResult = \"\";\n    string public privateKey = \"\";\n\n// ############## PUBLIC FUNCTIONS ##############\n\n// TODO: add constant keyword to readonly functions. Remove return from write functions\n\n    // Constructor of the contract\n    function Election(string _name) {\n        admin = msg.sender;\n        name = _name;\n    }\n\n    // https://youtu.be/kTlLX9jMjwk\n    function reset() requiresAdmin {\n        currentStage = Stage.PRE_VOTING;\n        votes.length = 0;\n        nrVotes = 0;\n        lastResult = \"\";\n        privateKey = \"\";\n    }\n\n    function startElection() requiresAdmin preVoting {\n        currentStage = Stage.VOTING;\n    }\n    \n    function vote(string _token, string _candidate) returns(uint) {\n        if(currentStage != Stage.VOTING) { error(99); return 99; } // WRONG_STAGE\n        if(alreadyVoted(_token)) { error(2); return 2; } // ALREADY_VOTED\n        if(! isTokenValid(_token)) { error(3); return 3; } // INVALID_TOKEN\n\n        // why? see http://ethereum.stackexchange.com/questions/3373/how-to-clear-large-arrays-without-blowing-the-gas-limit/3377\n        if(nrVotes == votes.length) {\n            votes.length += 1;\n        }\n        votes[nrVotes++] = Vote({\n            addr: msg.sender,\n            token: _token,\n            candidate: _candidate\n        });\n\n        voteEvent(currentRound, _token, nrVotes);\n        return 0;\n    }\n\n    function getNrVotes() returns(uint) {\n        return nrVotes;\n    }\n\n    function getCurrentElectionRoundAndStatus() returns(uint round, uint status) {\n        return (currentRound, uint(currentStage));\n    }\n\n    function stopElection() requiresAdmin voting {\n        currentStage = Stage.PROCESSING;\n        electionStatusEvent(currentRound, uint(currentStage));\n    }\n\n    function publishResult(string _result, string _privateKey) requiresAdmin {\n        lastResult = _result;\n        privateKey = _privateKey;\n\n        resultPublishedEvent(currentRound, _result);\n        currentStage = Stage.RESULT;\n        electionStatusEvent(currentRound, uint(currentStage));\n    }\n\n    function startNewRound() requiresAdmin {\n        currentStage = Stage.VOTING;\n        // votes.length = 0; // disabled because it easily runs out of gas\n        nrVotes = 0;\n        currentRound++;\n        electionStatusEvent(currentRound, uint(currentStage));\n    }\n\n// ############## MODIFIERS ##############\n\nmodifier requiresAdmin {\n    if(msg.sender != admin) throw;\n    _;\n}\n\nmodifier preVoting {\n    if(currentStage != Stage.PRE_VOTING) throw;\n    _;\n}\n\nmodifier voting {\n    if(currentStage != Stage.VOTING) throw;\n    _;\n}\n\n/*\nmodifier postVoting {\n    if(currentStage != Stage.POST_VOTING) throw;\n    _;\n}\n*/\n\n// ############## PRIVATE FUNCTIONS ##############\n\n    function alreadyVoted(string _token) returns(bool) {\n        for(var i=0; i<nrVotes; i++) {\n            if(compareStrings(votes[i].token, _token) == 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // checks if the token is valid and signed by the election registrar\n    // TODO: implement (see https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d)\n    function isTokenValid(string _token) returns (bool) {\n        return true;\n    }\n\n    // from https://raw.githubusercontent.com/ethereum/dapp-bin/master/library/stringUtils.sol\n    function compareStrings(string _a, string _b) returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n    }\n}\n",
    "language": "Solidity",
    "languageVersion": "0",
    "compilerVersion": "0.4.4+commit.4633f3de.Emscripten.clang",
    "abiDefinition": [
      {
        "constant": true,
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "stopElection",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_token",
            "type": "string"
          }
        ],
        "name": "isTokenValid",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_token",
            "type": "string"
          }
        ],
        "name": "alreadyVoted",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "privateKey",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "currentStage",
        "outputs": [
          {
            "name": "",
            "type": "uint8"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "votes",
        "outputs": [
          {
            "name": "addr",
            "type": "address"
          },
          {
            "name": "token",
            "type": "string"
          },
          {
            "name": "candidate",
            "type": "string"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "getCurrentElectionRoundAndStatus",
        "outputs": [
          {
            "name": "round",
            "type": "uint256"
          },
          {
            "name": "status",
            "type": "uint256"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "startElection",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "nrVotes",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_result",
            "type": "string"
          },
          {
            "name": "_privateKey",
            "type": "string"
          }
        ],
        "name": "publishResult",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "currentRound",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "lastResult",
        "outputs": [
          {
            "name": "",
            "type": "string"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "startNewRound",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_a",
            "type": "string"
          },
          {
            "name": "_b",
            "type": "string"
          }
        ],
        "name": "compareStrings",
        "outputs": [
          {
            "name": "",
            "type": "int256"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "reset",
        "outputs": [],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_token",
            "type": "string"
          },
          {
            "name": "_candidate",
            "type": "string"
          }
        ],
        "name": "vote",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [],
        "name": "admin",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [],
        "name": "getNrVotes",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "type": "function"
      },
      {
        "inputs": [
          {
            "name": "_name",
            "type": "string"
          }
        ],
        "type": "constructor"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "error",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "name": "",
            "type": "string"
          }
        ],
        "name": "log",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "_currentRound",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "_token",
            "type": "string"
          },
          {
            "indexed": false,
            "name": "_nrVotes",
            "type": "uint256"
          }
        ],
        "name": "voteEvent",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "_currentRound",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "_result",
            "type": "string"
          }
        ],
        "name": "resultPublishedEvent",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "_currentRound",
            "type": "uint256"
          },
          {
            "indexed": false,
            "name": "_status",
            "type": "uint256"
          }
        ],
        "name": "electionStatusEvent",
        "type": "event"
      }
    ],
    "userDoc": {
      "methods": {}
    },
    "developerDoc": {
      "methods": {}
    }
  }
}